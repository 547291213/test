Springmvc 的构成要素
两个层次：
１，基于框架所编写的应用程序的构成要素
２，框架自身的运行主线以及微观构成要素

构造springmvc应用程序的基本要素
一，指定springmvc的入口程序在web.xml中
<servlet>
<servlet-name>spring</servlet-name>
<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping> <servlet-name>spring</servlet-name>
<url-pattern>/*</url-pattern>
</servlet-mapping>
在这里，<url-pattern>定义了整个请求－响应的映射载体；url;
而<servlet-name>则将<servlet>节点和<servlet-mapping>节点联系在一起形成请求－响应的映射关系；
<servlet-class>则定义了具体响应的servlet实现类



二，编写springmvc的核心配置文件(在[servlet-name]-servlet.xml中)
xml代码：
<mvc:annotation-driven />
<context:component-scan base-package="com.demo2do" />
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<property name="prefix" value="/" />
<property name="fuffix" value=".jsp" />
</bean>
</beans>

三，编写控制controller层的代码
@Controller
@RequestMapping
public class UserController{
@RequestMapping("/login")
public ModelAndView login(String name,String password){
return new ModelAndView("success");
}
}

springmvc的基本要素－－
入口程序web.xml，
核心配置name-servlet.xml，
控制逻辑java.class


servlet规范－－－
控制流－－请求－响应的映射关系的定义，控制程序对于http响应的处理
数据流－－控制程序对于请求数据的处理，控制程序对于响应数据的处理

可能出现问题的处理　
１，项目规模扩大之后，请求－响应的映射关系全部定义在web.xml中，
将造成web.xml的不断膨胀而变得难以为继
２，核心servlet应该能够根据一定的规则对不同的http请求分发到不同
的Servlet对象上去进行处理
３，核心servlet应该能够建立起一整套完整的对所有http请求进行规范化处理的流程

对此springmvc提出的方案是：
将整个处理流程规范化，并把每一个处理步骤分派到不同的组件中进行处理

处理流程规范化－－将处理流程划分为若干个步骤（任务），并使用一条明确的逻辑主题将所有的步骤串联起来
处理流程组件化－－将处理流程中的每一个步骤（任务）都定义为接口，并为每个接口赋予不同的实现模式

一个通用的servlet响应程序大致应该包含的逻辑步骤
步骤１：对http请求进行初步处理，查找与之对应的controller处理类
步骤２：调用响应的controller处理类完成业务逻辑
步骤３：对controller处理类，调用时可能发生的异常进行处理
步骤４：根据controller处理类的调用结果，进行http相应处理


springmvc在进行组件管理时，会单独springmvc相关的组件构建一个容器环境，这一容器环境可以独立于应用程序自身所创建的spring容器
springmvc对这些组件的管理载体，就是我们在上一节中所提到的核心配置文件，我们可以知道核心配置文件在整个springmvc的构成要素中占有一席之地的重要原因就是：我们必须借助于一个高效的手段对整个springmvc的组件进行定义，而这一点正式通过核心配置文件来完成的。

流程图　　　　
    　处理流程规范化　　　　　　　　　　　　　　处理流程组件化
    　
    　处理流程的逻辑步骤定义－－－－－－－－－－》逻辑步骤的接口化定义
　　　　　　　　　　　　　　　　　　　　　　　　　　　　－
　　　　　　　　　　　　　　　　　　　　　　　　　　　－
　　　　　　　　　　　　　　　　　　　　　　　　　　－
　　　组件的逻辑窜连《－－－－－－－－－－－－－－－
　　　－
　　　　－
　　　　　－
　　　　　　－－－－－－－－－－－－－－－－－－－》组件的管理　　　　   
要点：
处理流程规范化和组件化，实在一个不断交叉，互为补充的过程中逐步完善的
springmvc就是通过DispatcherServlet将一堆组件串联起来的web框架

springmvc的设计原则

open for extension / closed for modification

springmvc设计要点
springmvc将http处理流程抽象为一个又一个处理单元
springmvc定义了一系列组件(接口)与所有的处理单元对应起来
springmvc由DispacherServlet贯穿始终，并将所有的组件串联起来

组件和DispatcherServlet总是维持着一个互相支撑的关系
DispatcherServlet----串联起整个逻辑主线，是整个框架的心脏
组件－－－－－－－－逻辑处理单元的程序化表示，起到承上启下的作用，是springmvc行为模式的实际承载者

从三个角度来理解DispatcherServlet的体系结构
运行特性，继承结构和数据结构

运行主线：
DispatcherServlet的核心本质是一个Servlet，Servlet可以根据其特性进行运行主线的划分
根据Servlet规范的定义，Servlet的两大核心方法init和servlet方法，他们的运行时间和触发条件都截然不同

１，init方法，在整个系统启动的时候运行，且只运行一次。因此在init方法中我们往往会对整个应用程序进行初始化操作。
这些初始化操作可能包括对容器的初始化，组件和外部资源的初始化等　
２，在整个系统运行的过程中出侦查模式，并且处理所有的ｗｅｂ请求。因此，
在service及其相关方法中，我们看到是对http请求的处理流程
springmvc利用servlet的这一特性的逻辑职责加以划分，从而形成了两条互不相关的逻辑运行主线
初始化主线－－－负责对springmvc的运行要素进行初始化
http请求处理主线－－负责对springmvc中的组件进行逻辑调度完成对http请求的处理

继承结构：
DispatcherServlet与Servlet容器之间的关系

spring框架解释：
spring是j2ee应用程序框架，是轻量级的ioc和aop的容器框架，主要针对javabean的声明周期进行管理的轻量级容器，可以单独使用，也可以和struts框架，iBatis等框架组合使用

构架概述：
DAO spring jdbc transaction management
ORM hibernate jpa toplink jdo ojb iBatis
JEE jmx jms jca remoding 
WEB spring web mvc ,framework intehration, struts, webwork, tapesty, jsf, rich view support, jsps ,velocity, freemarker, pdf, jasper reports , excel , spring porllet mvc
AOP spring aop , Aspectlj integration
CORE the ioc container

1，ioc(inversion of control)控制反转，对象创建责任的反转，在spring中beanfacotory是ioc容器的核心接口，负责实例化，定位，配置应用程序中的对象以及建立这些对象之间的依赖。xmlbeanfacotory实现spring中有三种注入方式，一种是set注入，一种是接口注入，另一种是构造方法注入。
2，aop(面向切面编程)a就是纵向的编程，业务1和业务2都需要一个共同的操作，与其往每个业务中都添加同样的代码，不如写一遍代码，让两个业务共同使用这段代码
spring中面向切面编程的实现有两种方式，一种是动态代理，一种是CGLIB，动态代理必须要提供接口，而CGLIB是有继承
3，为什么使用spring框架
在不使用spring框架之前，我们的service层中要使用dao层的对象，不得不在service层中new一个对象。
不使用spring框架之前，我们的service层中要使用dao层对象，不得不在service层中new一个对象来调用方法  
//dao层对象
public calss UserDao{
 public void insert (User user){}
 }
 //service层对象
 public class UserService{
 public void insert(User user){
 UserDao userdao=new UserDao();
 userdao.insert(user);
  }
 }

这种方法存在的问题：层与层之间的依赖

使用spring框架之后：
//dao层对象
public class UserDao{
public void insert(User user){}
}
//service层对象
public class UserService{
private UserDao userdao;
public UserDao getUserdao(){
 return userdao;
 }
public void setUserdao(UserDao userdao){
 this.userdao=userdo;
 }
public void insert(User user){ 
 userdao.insert(user);
 }

}

service层要用dao层对象需要配置到xml配置文件中，至于对象是怎么创建的，关系是怎么组合的都交给了spring框架去实现。

框架优点：
轻量级的容器框架没有侵入性
使用ioc容器更加容器组合对象直接间关系，面向接口编程，降低耦合
aop可以更加容易的进行功能扩展，遵循ocp开发原则
创建对象默认是单例的，不需要在使用单例模式进行处理

缺点：
业务功能依赖spring特有的功能，依赖与spring环境

spring框架的三种注入方式：set注入，构造方法注入，接口注入
1，set注入
采用属性的set方法进行初始化，就称为set注入
一，给普通字符类型赋值
public class User{
private String username;
public String getUseename() {
return username;
}
public void setUsernaem(String username){
this.username=username;
}
}
我们只需要提供属性的set方法，然后去属性文件中配置好让框架能够找到applicationCOntext.xml文件的beans标签。标签beans中添加bean标签，指定id，class值，id值不作要求，calss值为对象所在的完整路径。bean标签再添加property标签，要求：name值与user类中对应的属性名称一直，value值就是我们要给user类中的username属性赋的值。
<bean id="userAction" class="com.lsz.spring.action.User" >
<span style="white-space:pre"> 
</span> <property name="username" value="admin" > </property>
</bean>

二，给对象赋值
同样使用set方法
public class User{
private UserService userservice;
public UserServiceUserservice(){
return userservice;
}
public void setUserservice(UserService userservice)
{
this.uservice=userservice;
}
}


spring框架注解

注释与注解的区别：
注释是给我们看的，java虚拟机不会变异，注解也是不编译的，但是我们可以通过反射机制去读取注解中的信息，注解使用关键字@interface，继承java.lang.annotion.Annotion
使用注解编程，主要是为了替代xml文件，使开发更加快速，但是xml文件的使用就是解决修改程序修改源代码，现在又不去使用xml文件，那么不就违背了开闭原则了么，的却是。不过么，注解也有注解的好，使用注解就是不用配置那么多的xml文件啦，最重要的是开发效率高
在没有使用注解时，spring框架的配置文件applicationContext。xml文件中需要配置许多的<bean>标签，用来声明类对象。使用注解，则不必在配置文件中添加标签啦，对应的实在对应类的“注释”位置添加说明。

spring框架使用的是分层的注解
持久层：@Respository
服务层：@Service
控制层：@Controller
使用注解，需要在配置文件中增加命名空间和约束文件
    <beans ...  
        xmlns:context="http://www.springframework.org/schema/context"  
	    xsi:schemaLocation="  
	        ...  
		    http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context-2.5.xsd  
		        ">  
需要告诉框架哪些类是使用注解的
<context:component-scan base-package="com.lsz.spring"  />

持久层注解
package com.lsz.spring;
@Repository
public class UserDao[
}
等同于配置文件：
<bean id="userDao" class="com.lsz.spring.UserDao"  />

服务层注解
@Service(value="testService")
public class TestService{
@@REsource  //相当于自动装配
private UserDao userDao;
public  UserDao getUSerDao(){
return  userDao;
}
public void setUserDao(UserDao userDao){
this.userDAo=userDao;
}
}

@Resource 对象间关系的组合，默认采用的是byName方式进行装配，如果根据名称查找不到关联的对象，那么会采用byType继续查找

@Service注解等同于
<bean id="testService" class="com.spring.UserService"  />

控制层注解
@Controller(value="ua")
@Scope(value="propertype")
public class UserAction{
@REsource
private UserService userService ;
public UserService getUserService(){
retrun userService;
}
}

@Controller注解等同于
<bean id="ua" class="com.lsz.spring.UserAction"  />

aop(Aspect-Oriented-Programming)面向切面编程，与oop完全不同，使用aop编程系统被分为切面或关注点，而不是对象

在oop面向对象的使用中，无可避免的会出现代码重复，而且使用面向对象的编程方式，这种重复无法避免，比如用户权限判断中，根据响应的权限执行相应的方法；在servlet中设置编码格式时，同样相同的代码出现很多次，而且还和业务无关，很容易忘记写，结果运行的时候就出现乱码拉。这种重复代码不仅使编程麻烦，而且还不容易维护。而aop则将这些代码整理起来，将解决某个切面问题的代码单独的放在某个模块中，然后再植入到程序中  。

aop术语详解
Aspect：横切面的功能，抽象出类，或者接口，aop编程最重要的就是识别出切面问题 （切面，类似于字符编码功能）
Advice：横切面功能的具体实现，需要根据实际的情况分析，如果在目标对象操作之前是before，在操作之后就是after advice（增强，类似与字符编码过滤器）
Pointcut：切入点，描述横切面功能应用的限制，不是所有的流程都系要，那些可以使用的地方就是切入点（类似于过滤器的匹配规则）
Joinpoint：连接点，或指组件加入流程的时机，比如设置属性，调用方法等，spring只支持方法调用的连接点，而且他的一些框架支持属性的连接点。AspectJ
Weave：缝合，将组件应用到业务流程中的这个过程，叫缝合  
Proxy：代码，在实现上，spring的aop其实就是使用jdk的动态代理（使用接口的方式完成代理操作），也可以使用CGLIB（使用继承的方式完成代理操作)
Target：目标，业务操作的实际对象 

xml文件 配置过滤器
<span style="font-size :18px" ><!--字符编码过滤器 -->
<filter>
<filter-name>CharacterFilter</filter-name>
<filter-class>filter-address</filter-class>
</filter>
<filter-mapping>
<filter-name>CharacterFilter</filter-name>
<url-pattern>/servlet</url-pattern>
</filter-mapping>
</span>

过滤器类：
<span style="font-size:18px;" 
public class CHaracterEncodingFilter implements Filter{
@override
public void destroy() {}
@Override
public void doFIlter(ServletRequest request,ServletREsponse response,
FilterChain chain) throws IOException,ServletException{
request.setCharacterEncoding("GB18030");
chain.doFIlter(request,response);
}
@Override
public void init(FilterConfig filterCOnfig) throws ServletException {}
}
</span>



spring的核心机制：管理bean
程序主要是通过spring容器来访问容器中的Bean，ApplicationContext是Spring容器最常用的接口，该接口有如下两个实现类：
ClassPathXmlApplicationContext 从类加载路径下搜索配置文件，并根据配置文件来创建spring容器
FileSystemXmlApplicationContext 从文件系统的相对路径或绝对路径下去搜索配置文件，并根据文件来创建spring容器
public class BeanTest{
public static void main(String args[]) throws Exception{
  ApplicationContext ctx=new ClassPathXmlApplicationContext("beans.xml");
  Person p= ctx.getBean("Person",Person.class);
}

Eclipse使用spring
在eclipse等IDE工具中，用户可以自建user library，然后把spring的jar包都放入其中，当然也可以将jar包直接放在项目的/WEB-INF/lib目录下，但是如果使用user library，在项目发布时，需要将用户库引用的jar文件随应用一起发布，就是将user library所使用的jar复制到/WEB-INF/lib目录下，这是因为对于一个web应用，eclipse部署web应用时不会将用户库的jar文件复制到/WEB-INF/lib下，需要手动复制。

依赖注入：
spring框架的核心功能有两个
spring容器作为超级大工厂，负责创建，管理所有的java对象，这些java对象被称为bean
spring容器管理中bean之间的依赖关系，spring使用一种被称为“依赖注入”的方式来管理bean之间的依赖关系
使用依赖注入，不仅可以为bean注入不同的属性值，还可以注入其他bean的引用。依赖注入是一种优秀的解耦方式，其可以让bean以配置文件组织在一起，而不是以硬编码的方式耦合在一起

从spring容器的角度来看，spring容器负责将被负责将被依赖对象赋值给调用者的成员变量--相当于为调用者注入它依赖的实例
设值注入，指ioc容器通过成员变量的setter方法来注入被依赖对象。这种注入方式简单，只管，因而在spring的依赖注入里面大量使用
构造注入，利用构造器来设置依赖关系的方式，被称为构造注入。通俗来说，就是驱动spring在底层以反射凡是执行带指定参数的构造器，当执行带参数的构造器时，就可利用构造参数对成员变量执行初始化--这就是构造注入的本质。

设值注入的优点：
    与传统的javabean的写法更相似，程序开发人员更加容易理解,接受。通过setter方法设定依赖关系显得更加只管，自然。
    对于复杂的依赖关系，如果采用构造注入，会导致构造器国语臃肿，难以阅读。spring在创建实例时，需要同事实例化其依赖的全部实例，因而导致性能下降。而使用设值注入，则能避免这些问题
    尤其在某些成员变量可选的情况下，多参数的构造器更加笨重

spring容器bean
卡法这使用spring框架做两件事：1开发bean 2配置bean 
对于spring框架本身而言，他要做的就是根据配置文件来创建bean实例，并调用bean实例的方法完成bean实例的实例化，还可以为bean指定特定的作用域
spring支持如下五种作用域：
singleton 单例模式，在整个spring ioc容器中，singleton作用域的bean将只生成一个实例
prototype 每次通过容器的getbean方法获取prototype作用域的bean时，都将产生一个新的bean实例
request对于一次http请求，request作用域的bean将只生成一个实例，这意味着，在同一次http请求内，程序每次请求该bean，得到的总是同一个实例，只有在web应用中使用spring时，该作用域才真正有效。
对于一次http回话，session作用域的bean将只生成一个实例，这意味着，在同一次http会话内，程序每次请求该bean，得到的总是同一个实例，只有在web应用中使用spring时，该作用域才真正有效。
global session 每个全局的http session对应一个bean实例，在典型的情况下，仅适用portlet context的时候有效，同样只在web应用中有效

如果不指定bean的作用域，spring默认使用singleton作用域。prototype作用域的bean的创建，销毁代价比较大。而singleton作用域的bean实例一旦创建成果，就可以重复使用。因此，应该尽量避免将bean设置成prototype作用域

使用自动装配注入合作者bean
spring能自动装配bean与bean之间的依赖关系，即无需使用ref显式指定依赖bean，而是由spring容器检查xml容器检查xml配置文件内容，根据某种规则，为调用者bean注入被依赖的bean
spring自动装备可通过<beans/>元素的default-autowire属性指定，该属性对配置文件中所有的bean起作用；也可通过<bean/>元素的autowire属性指定，该属性只对该bean起作用

aop（aspect orinted programming）的基本概念
关于面向切面编程的一些术语
切面（Aspect）：切面用于组织多个advice，advice放在切面中定义
连接点（joinpoint）：程序执行过程中明确的点，如方法的调用，或者异常的抛出。在spring aop中，连接点总是方法的调用
增强处理（advice）：aop框架在特定的切入点执行的增强处理。处理有around，before，after类型
切入点（pointcut）：可以插入增强处理的连接点。简而言之每当某个连接点满足指定要求时，该连接点被添加增强处理，该链接点也就编程了切入点。
spring的aop支持
spring中aop代理由spring的ioc容器负责生成，管理，其依赖关系也由ioc容器负责管理
为了在应用中使用@aspectj支持，spring需要添加三个库

jsp javabean是特殊的java类，使用java语言书写，并且遵守javabean api规范
接下来给出的是javabean与其他类相比而言独一无二的特征

提供一个默认的无参构造函数
需要被序列化并且实现了Serializable接口
可能偶一系列可读写属性
可能有一系列的getter或者setter操作

javabean属性
一个javabean对象的属性应该是可以访问的，这个属性可以使任意合法的java数据类型，包括自定义java类
一个javabean对象的属性是可读写，或只读，只写。javabean对象的属性通过javabean实现类中提供的两个方法来访问   
getPropertyName()    setPropertyName()

java servlet是运行在web服务器或者应用服务器上的程序，它是作为来自web浏览器或其他http客户端的请求和http服务器上的数据库或者应用程序之间的中间层
使用servlet可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态的创建网页
javaservlet通常情况下与使用CGI（common geteway interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于CGIservlet有以下几点优势

servlet架构
web browser《------http protocol------》http server---servlets program----database

servlet任务：
servlet执行以下主要任务
读取客户端发送的显示的数据，这包括网页上的html表单，或者也可以是来自applet或自定义的http客户端程序的表单

读取客户端发送的隐式的http请求数据，这包括cookies，媒体类型和浏览器能理解的亚索格式等

处理数据并且生成结果，这个过程可能需要访问数据库，执行pmi或者corba调用，调用web服务，
或者直接计算得出对应的响应

发送显式的数据到客户端，该文档的格式可以是多种多样的，包括文本文件，二进制文件，excel

发送隐式的http响应到客户端。这包括告诉浏览器或其他客户端被返回的文档类型，设置cookies和缓存参数，以及其他类似的任务

servlet生命周期   可以定义为从创建知道毁灭的整个过程，以下是servlet遵循的过程
servlet通过调用init（）方法进行初始化
servlet调用service（）方法来处理客户端的请求 
servlet通过调用destory（）方法来终止
最后，servlet由jvm的垃圾回收箱进行垃圾回收处理

init（）方法被设计成只调用一次，他在第一次创建servlet时被调用，在后续每次用户请求时不再调用。因此，它适用于一次性初始化，就像applet的init方法一样
servlet创建于用户第一次调用一个servlet的url时，但是也可指定servlet在服务器第一次启动时被加载。
当用户用一个servlet时，就会创建一个servlet实例，每一个用户请求都会产生一个新的进程，适当的时候移交给doGet或者doPOst方法，init（）方法简单地创建或者加载一些数据，这些数据被用于servlet的整个生命周期

init()方法
public void init()throws ServletException{
//初始化代码
}
service()方法
service()方法是执行实际任务的主要方法，servlet容器调用service（）方法来处理来自客户端的请求，并把格式化的响应写回给客户端
每次服务器接收到一个servlet请求时，服务器会产生一个新的线程并且调用服务，service（）方法检查http请求类型，(GET,POST,PUT,DELETE等)，并在适当的时候调用doGet，doPOst，doPut，doDelete等方法
public void service (ServletRequest request,ServletResponse response))
throws ServletExcption,IOException{}

doGet()方法
get请求来自于一个url的正常请求，或者来自一个未指定method的html表单，他由doGet()方法处理
public void doGet(HtppServletRequest request,
HttpServletResponse response)
throws ServletException,IOException {----}
doPost()方法
post请求来自于一个特别指定了method为post的html表单
public void doPOst(HttpServletRequest request,
HttpServletResponse response)throws ServletException,IOException
{-----}
destroy()方法
destroy方法只会被调用一次，在servlet生命周期结束时被调用。destroy方法可以让您的servlet关闭数据库连接，停止后台线程，把cookie列表或点击计数器写到磁盘，并执行其他类似的清理活动
在调用destroy方法之后，servlet对象被标记为垃圾回收
public void destroy(){----}

servlet部署在web，xml文件中创建以下条目
<web-app>
<servlet>
<servlet-name>HelloWorld</servlet-name>
<servlet-class>HelloWorld</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>HelloWorld</servlet-name>
<url-pattern>/HelloWorld</url-pattern>
</servlet-mapping>
</web-app>

2017-08-22 modify-------------
常用术语：
企业级javabean（enterprise javabean，EJB）
java数据对象（java data object，JDO）
简单老式java对象（plain old java object，POJO）
java2企业版（java 2 enterprise edition，J2EE）
依赖注入 （dependency injection，DI）
面向切面编程 （aspect-oriented programming，AOP）


为了降低java开发的复杂性，spring采取了以下四种关键策略
1，基于pojo的经良机和最小侵入性编程
2，通过依赖注入和面向接口实现松耦合
3，基于切面和惯例进行声明试编程
4，通过切面和末班减少样板式代码

DI(Dependency Injection)依赖注入出现的必然性：
耦合具有两面性(two-headed beast).一方面，紧密耦合的代码难以测试，难以复用，
难以理解，并且典型地表现出“打地鼠”式的bug特性，另一方面，一定程度的耦合又是必须的--完全没有耦合的代码什么也做不了。为了完成有实际意义的功能，不同的类必须以适当的方式进行交互。总而言之，耦合是必须的，但应当被小心谨慎地管理。

DI；对象的依赖关系将由系统总负责卸掉各对象的第三方组件在创建对象的时候进行设定。对象无需自行创建或者管理他们的依赖关系

DI能够让相互协作的软件组件保持松散耦合，而面向切面编程（aspect-oriented programming，AOP）允许你把遍布应用各处的功能分离出来形成可重用的组件

面向切面编程往往被定义为促使软件系统实现关注点的分离的一项技术，系统由许多不同的组件组成，每一个组件各负责一块特定功能。除了实现自身核心的功能之外，这些组件还经常承担着额外的职责。诸如日志，事务管理和安全这样的系统服务经常融入到自身具有核心业务逻辑的组件中去，这些系统服务通常被称为横切关注点，因为它们会跨越系统的多个组件

如果将这些关注点分散到多个组件中去，你的代码将会带来双重的复杂性
1，实现系统关注点功能的代码将会重复出现在多个组件中。这意味着如果你要改变这些关注点的逻辑，必须修改各个模块中的相关实现，即使你把这些关注点抽象为一个独立的模块，其他模块只是调用它的方法，但方法的调用还是会重复出现在各个模块中。
2，组件会因为那些与自身核心业务无关的代码而变得混乱。一个向地址薄增加地址条目的方法应该只关注如何添加地址，而不应该关注它是不是安全的或者是否需要支持事务

aop能够使这些服务模块化，并以声明的方式将他们应用到它们需要影响的组件中去，所造成的结果就是这些组件会具有更高的内聚性并且会更加关注自身的业务，完全不需要了解及系统服务所带来复杂性。总之，aop能够确保pojo的简单性

在基于spring的应用中，你的应用对象生存于spring容器(container)中，spring容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期，从生存到死亡(从new到finalize)

spring容器并不是只有一个，spring自带了多个容器实现，可以归为两种不同的类型，bean工厂（由di支持），应用上下文基于beanfactory构建，并提供应用框架级别的服务，例如从属性文件解析文本信息以及发布应用时间给感兴趣的事件监听者。

spring常见的应用上下文
AnonotationConfigApplicationContext:从一个或者多个预计java的配置类中加载spring应用上下文
AnnotationConfigWebApplicationContext:从一个或者多个基于java的配置类中加载spring web应用上下问
ClassPathXmlApplcationContext:从类路径下的一个或者多个xml配置文件中加载上下文定义，把应用上下文的定义文件作为类资源
FileSystemXmlApplicationContext:从文件系统下的一个或多个xml配置文件中加载上下文定义
XmlWebApplicationContext:从web应用下的一个或者多个xml配置文件中加载上下文定义

应用上下问准备就绪之后，我们就可以调用上下文的getBean()方法从sprng容器中获取bean
在bean准备就绪之前，bean工厂执行了若干启动步骤

1.Spring对bean进行实例化;
2.Spring将值和bean的引用注入到bean对应的属性中;
3.如果bean实现了BeanNameAware接口,Spring将bean的ID传递给
setBean-Name()方法;
4.如果bean实现了BeanFactoryAware接口,Spring将调
用setBeanFactory()方法,将BeanFactory容器实例传入;
5.如果bean实现了ApplicationContextAware接口,Spring将调
用setApplicationContext()方法,将bean所在的应用上下文的
引用传入进来;
6.如果bean实现了BeanPostProcessor接口,Spring将调用它们
的post-ProcessBeforeInitialization()方法;
7.如果bean实现了InitializingBean接口,Spring将调用它们的
after-PropertiesSet()方法。类似地,如果bean使用init-
method声明了初始化方法,该方法也会被调用;
8.如果bean实现了BeanPostProcessor接口,Spring将调用它们
的post-ProcessAfterInitialization()方法;
9.此时,bean已经准备就绪,可以被应用程序使用了,它们将一直
驻留在应用上下文中,直到该应用上下文被销毁;
10.如果bean实现了DisposableBean接口,Spring将调用它的
destroy()接口方法。同样,如果bean使用destroy-method声明
了销毁方法,该方法也会被调用。

第二章：装配bean
在spring中，对象无需自己查找或创建与其所关联的其他对象。相反，容器负责把需要互相写作的对象引用赋予各个对象
创建应用对象之间协作关系的行为通常称为装配(wiring)，这也是依赖注入di的本质。

spring容器负责创建应用程序中的bean并通过di来协调这些对象之间的关系。但是作为开发人员，我们需要告诉spring要创建哪些bean并且如何将其装配在一起。spring提供了三种装配机制
1，xml中进行显示配置
2，java中进行显示配置
3，隐式的bean发现机制和自动装配

spring的自动装配
spring从两个角度来实现自动化装配
组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean
自动装配(autowiring)：spring自动满足bean之间的依赖

spring boot的基础结构共三个文件
src/main/java 程序开发以及主程序入口
src/main/resourcs 支配文件
sec/test/java 测试程序

在spring-boot中运用第三方的json框架步骤：
1，在pom.xml中引入相应的依赖
2，在Application.java中继承WebMvcConfigureAdapter重写方法：configureMessageConverters 添加我们自己定义的json解析框架
2.1,@Bean注入第三方的json解析框架
	@Bean
	public HttpMessageConverters fastJsonHttpMessageConverters()
	{
	//1 需要定义一个conver转换消息的对象
	FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();

	//2 添加fastJson 的配置信息，比如，是否要格式化返回json数据
	FastJsonConfig fastJsonConfig = new FastJsonConfig();
	fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);

	//3 在convert中添加配置信息
	fastConverter.setFastJsonConfig(fastJsonConfig);

	//FastJsonHttpMessageConverter converter = fastConverter;
	HttpMessageConverter<?> converter = fastConverter;
	return new HttpMessageConverters(converter);

	}

spring-boot 热部署
  <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- fork :如果没有这个配置，devtools不会起作用  -->
                <configuration>
                <fork>true</fork>
                </configuration>
            </plugin>

JPA：
JPA全称java persistence api。jpa通过jdk5.0注解或xml描述对象----关系表的映射关系，并将运行期的实体对象持久化到数据库中。

持续化(persistence)，即把数据（内存中的对象）保存到可永久保存的存储设备中(磁盘等)。持续化的主要应用是将内存中的对象存储早数据库中，或者存储在磁盘文件中，xml数据文件中等

-------持久化是将程序数据在持久状态和瞬时状态间转换的机制
-------jdbc就是一种持久化机制，文件io也是一种持久化机制

Hibernate:
Hibernate是一个开放源代码的对象关系映射框架，它对jdbc进行了非常轻量级的对象封装，它将POJOPOJO与
数据库表建立映射关系，是一个全自动的orm框架，Hibernate可以自动生成sql语句自动执行，使得java程序员可以随心所欲的使用对象编程思维来操纵数据库，Hibernate可以应用在任何使用jdbc的场合，既可以在java客户端程序使用也可以在
servlet/jsp的web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的j2ee架构中取代cmp，完成数据持久化

JPA/hibernate的关系
jpa是一种规范，而Hibernate是他的一种实现。除了HIbernate，还有EclipseLink，OPenJPA等可供选择，所以使用JPA的一个好处是，可以更换实现而不必改动太多代码

orm:
orm是对象关系映射的意思，英语：object relational mapping 用于实现面向对象编程语言
里不同系统类型的系统之间的数据转换。


spring-data:
Spring Data 是一个用于简化数据库访问，并支持云服务的开源框架，其主要目标是使得数据库的
访问变得方便快捷，并支持map-reduce框架和云计算数据服务。此外，他还支持基于关系型数据库的数据服务，
如oracle rac等。对于拥有海量数据的项目，可以用spring data来简化项目的开发。

Spring Boot JPA-Hibernate编程实现步骤:
1，在pom.xml添加mysql.spring-data-jpa依赖
2，在application.properties文件中配置mysql连接配置文件
3，在application.properties文件中配置jpa配置信息
4，编写测试例子
编写测试里子的步骤：
1，创建实体类Demo，如果已经存在，可以忽略
2，创建jpa repository类操作持久化(CruRepository)
3，创建service类
4，创建rstful请求类
5，测试


spring-boot之hello world访问404
1，地址是否正确
2，注解是否正确
3，包路径是否正确

问题提出：
1，默认的端口号为8080，那么如何进行修改为80或者8081>？
server.port=8081
2，如何配置上下文(项目的名称)？http://127.0.0.1:8080/springboot/hello
server.context-path=spring-boot

spring boot使用thymeleaf
操作步骤
1，在pom.xml中引入thymeleaf
2，如何关闭thymeleaf缓存
3，编写模板文件.html
4，编写访问模板文件controller

spring boot使用freemarker
操作步骤
1，在pom.xml中引用freemarker
2，关闭freemarker缓存
3，编写模板文件.ftl
4，编写访问文件的controller

spring boot添加jsp支持
操作步骤
1，创建maven web project
2，在pom.xml文件添加依赖
3，配置application.properties支持jsp
4，编写测试controller
5，编写jsp页面
6，编写启动类app.java

spring boot集成mybatis
操作步骤
1，集成MyBatis
2，使用PageHelper分页
3，获取自增长ID
(1)， 新建maven project
(2)， 在pom.xml文件中引入相关依赖
(3)， 创建启动类App.java
(4)， 在application.properties添加配置文件
(5)， 编写Demo测试类
(6)， 编写DemoMapper
(7)， 编写DemoService
(8)， 编写DemoController
(9)， 加入PageHelper
(10)，获取自增长ID


2017---08---28
spring boot 定时任务    

1，定时任务的几种实现方式
2，spring task
3，cronExpression配置和cron例子

(1),java自带的java.util.Timer类，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能指定时间运行。
(2),使用Quartz，这是一个功能比乔强大的调度器，可以让你的程序在指定时间执行，也可以按照某一个频度执行，配置起来稍微复杂
(3)，spring3.0以后自带task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多

Spring Task
操作步骤
(1),新建工程
(2),pom文件添加依赖
(3),编写启动类
(4),编写scheduler类

spring-boot-class 标注
SpringBootApplication  实际上是以下三个标注的集合
1，Configuration 告诉spring这是一个配置类，里面的所有标注了@Bean的方法的返回值将被注册为一个Bean
2，EnableAutoConfiguration 告诉Spring基于class  path的设置，其他bean以及其他设置来为应用程序添加各种bean
3，ComponentScan  告诉spring扫描class path下所有类来生成响应的bean
EnableScheduling  告诉spring创建一个task executor，如果我们没有这个标注，所有Scheduled标注都不会执行

Schedlled参数
Sceduled主要支持fixRate，fixDelay，cron，initialDelay这些参数
fixRate和fixDelay
fixRate和fixDelay参数都指定了函数每隔某个毫秒执行一次，但是他们之间也有细小的差别
fixRate
fixRate的计时是相对于系统时间的，也就是一定相隔会固定时间执行
fixDelay
fixDelay的计时是相对于上一次调用的时间的，因此他受其他程序调用的影响，如果该函数在其他地方被手动调用，那么这个计时器就会重新计时。
initialDelay参数
initialDealy参数是个额外参数，比较简单，就是指定从项目开始运行到该函数首次被调用的执行时间，以毫秒为计
如果不指定该参数默认为-1，也就是程序开始时不执行
cron
这个cron是最复杂也是最高自定义化的定时工具，在linux系统里也有类似的crontab命令。他其实是更加细致的定义了定时任务，以一个字符窜的形式进行表示
在spring-boot中，一个cron字符窜是由六个部分以空格组成的字符窜，文档中的例子是这样的：
六个部分分别表示：秒 分 时 日 月 周
"0 0 * * * *" = top of every hour of every day
"*/10 * * * * *" = every ten seconds
"0 0 8-10 * * *" = 8,9 and 10 o'clock of ervery day
"0 0/30 8-10 * * *" =8.00,8.30,9.00,9.30,10.00 and 10.30 every day
"0 0 9-17 * * MON-FRI" =on the hour nine-to-five weekdays
"0 0 0 25 12 ? "every Christmas Day at midnight

example:
@Scheduled(cron = "0 0/5 * * * ?")
public void fiveMinutes(){
  //do sth.
}

Quartz介绍
Quartz是一个完全由java编写的开源作业调度框架，是OpepSymphony开源组织在JOb scheduling领域又一个开源项目，它可以与J2EE与j2se应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个甚至是好几万个JObs这样复杂的程序。
Quartz是一个完全由java编写的开源作业调度框架，为在java应用程序中进行作业调度提供了简单却强大的机制。Quartz允许开发人员根据时间间隔来调度作业。它实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。简单的创建一个org.quarz.jab接口的java类

选择Quartz的团队基本上是冲着Quartz本身实现实现的集群取得，不然JDK自带Timer就可以实现相同的功能，而Timer存在的单点故障是生产环境上所不能容忍的。在自己造个有负载均衡和支持集群(高可用，伸缩性)的调度框架又影响项目的进度，所以大多数团队都直接使用Quartz来作为调度框架
一个Quartz集群中的每个节点是一个独立的Quartz应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或者停止。Quartz集群中，独立的QUartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据表来感知到另一个Quartz应用的

Quartz的特点
1，强大的调度功能，例如支持丰富多样的调度方法，可以满足各种各样常规以及特殊需求
2，灵活的应用方式，例如支持任务和调度的多种组合方式，支持调调数据的多种存储方式
3，分布式和集群能力，Terracotta收购后在运来功能基础上做了进一步的提升
4，Quartz很容易与Spring继承实现灵活可配置的调度功能

Quartz专用词汇说明
scheduler：任务调度器
trigger：触发器，用于定义任务调度时间规则
job：任务，即被调度的任务
misfire：错过的，指本来应该被执行但实际没有被执行的任务调度

Quartz任务调度基本实现原理
Quartz任务调度的核心元素是scheduler，trigger和job，其中和job是任务调度的元数据，scheduler是实际执行调度的控制器
在Quartz中，是用于定义调度时间的元素，即按照什么时间规则去执行任务。QUartz中主要提供了四种类型的trigger：SimpleTrigger，CronTrigger，DateIntervalTrigger和NthIncludeDayTrigger

在Quartz中，job用于表示被调度的任务。主要有两种类型的job：无状态的(stateless)和有状态的(stateful)。对于同一个trigger来说，有状态的job不能被并行执行，只有上一次出发的任务被执行之后，才能出发下一次执行。job主要有两种属性：volatilly和durabilly，其中volatillty表示任务是否被持久化到数据库存储，而durability表示在没有trigger关联的时间任务是否被保留。两者都是在值为true的时候任务被持久化或者保留。一个job可以被多个trigger关联，但是一个trigger只能关联一个job

运行的定时程序修改定时时间
操作步骤：
1，定义类  并且实现SchedulingCOnfigurer接口
2，重载实现相应的方法 configureTasks，nextExecutionTime
3，编写映射地址方法来修改定时时间


spring-boot  定时任务 集群/分布式下的定时任务说明

spring-boot 精要
1，自动配置 支队很对spring应用程序的开发之中，spring booot能自动提供相关配置
2，起步依赖 告诉spring boot应用程序常见的应用功能，spring boot能自动提供相关配置
3，命令行界面 这是spring-boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建
4，Actuator 让你能够深入运行中spring boot应用程序 一探究竟

@RestController和@RequestMapping注解
RestController注解告诉spring以字符窜的形式渲染结果，并且直接返回给调用者
RequestMapping注解提供路由信息，它告诉spring任务来自某路径的http请求都应该被映射到某个具体方法
@EnableAutoConfiguration注解
EnableAutoCOnfiguration这个注解告诉spring boot根据添加的jar依赖猜测你想如何【配置spring。由于spring-boot-starter-web添加了tomcat和spring mvc，所以auto-configuration将假定你正在开发一个web应用并相应地对spring进行设置。
main方法：
我们的应用程序最后部分是main方法，这只是一个标准的方法，它遵循java对于一个应用程序入口点的约定。我们的main方法通过调用run，将业务委托给了spring-boot的springapplication类。springapplication将引导我们的应用，启动spring，相应地启动被自动配置的tomcat web服务器，我们需要将类作为参数传递给run方法来告诉springapplication谁是主要的spring组件。为了暴露任何的命令行参数，args数组也会被传递过去

maven用户可以继承spring-boot-starter-parent项目来获取合适的默认设置。该父项目提供以下特性
默认编译级别为java1.8
源码编码为utf-8
一个依赖管理节点，允许你管理普通依赖的version标签，继承自spring-boot-dependencies POM
合适的资源过滤
合适的插件配置(exec插件，surefire，Git commit ID，shade)
针对application.properties和application.yml的资源过滤
最后一点：由于默认配置文件接收spring风格的占位符(${...})，maven filtering改用@..@占位符可以用maven属性resource.delimiter来覆盖

继承starter parent
想配置你的项目继承spring-boot-starter-parent只需要简单地设置parent为：
<parent> 
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-parent</artifactId>
<version>1.3.0.BUILD-SNAPSHOT</version>
</parent>

改变java版本
<properties>
<java.version>1.8</java.version>
</properties>

使用spring-boot-maven插件
<build>
<plugins>
<plugin>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-maven-plugin</artifactId>
</plugin>
</plugins>
</build>
注意：如果使用spring boot starter parent pom 你只需要添加该插件而不需要配置他，除非你想改变定义在parent中的设置

spring-boot application starters
spring-boot-starter  核心spring boot starter 包括自动配置支持，日志和YAML
spring-boot-starter-actiator 生产准备的特性，用于帮助你监控和管理应用
spring-boot-starter-amqp 对高级消息队列协议的支持，通过spring-rabbit实现
spring-boot-starter-aop 对面向切面编程的支持，包括spring-aop和AspectJ
spring-boot-starter-batch对spring batch的支持，包括HSQLDB数据库
spring-boot-starter-cloud-connectors 对spring cloud connectors的支持，简化在云平台下服务的链接
spring-boot-starter-data-elasticsearch 对Elasticsearch搜索和分析引擎的支持，包括spring-data-elasticsearch
spring-boot-starter-data-gemfire 对gemfire分布式数据存储的支持，包括spring-data-gemfire
spring-boot-starter-data-jpa  对jaba持久化api的支持，包括spring-data-jpa，spring-orm和hibernate
spring-boot-starter-data-mongodb 对mongodb nosql数据库的支持，包括spring-data-mongodb
spring-boot-starter-data-rest 对通过rest暴露spring data仓库的支持，通过spring-data-rest-webmvc实现
spring-boot-starter-data-solr 对apache solr搜索平台的支持，包括spring-data-solr
spring-boot-starter-freemarker 对freemarker末班引擎的支持
spring-boot-starter-groovy-templates对groovy末班引擎的支持
spring-boot-starter-hateoas对基于hateoas的restful服务的支持，通过spring-hateoas实现
spring-boot-starter-hornetq 对jaba消息服务api的支持，通过hornetq实现
spring-boot-starter-integration 对普通spring-integration模块的支持
spring-boot-starter-jdbc 对jdbc数据库的支持
spring-boot-starter-jersey 对jersey restful web' 服务框架的支持
spring-boot-starter-jta-atomikos 对hta分布式事务的支持，通过atomikos实现
spring-boot-starter-jta-bitronix 对jta分布式事务的支持，通过bitronix实现
spring-boot-starter-mail对javax。mail的支持
spring-boot-starter-mobile  对spring-mobile的支持
spring-boot-starter-mustache 对mustach末班引擎的支持
spring-boot-starter-redis对redis键值数据存储的支持，包括spring-redis
spring-boot-starter-security 对spring-security的支持
spring-boot-starter-social-facebook 对spring-social-facebook的支持
spring-boot-starter-social-linkedin 对spring-social-linkedin的支持
spring-boot-starter-social-twitter 对spring-social-twitter的支持
spring-boot-starter-test 对常用测试依赖的支持，包括junit
spring-boot-starter-thymeleaf 对themeleaf末班引擎的支持，包括和spring的集成
spring-boot-starter-velocity 对velocity模板引擎的支持
spring-boot-starter-web对全栈web开发的支持，包括yomcat和spring-webmvc
spring-boot-starter-websocket 

使用default包
当类没有包含package声明时，他被认为处于default package下。通常不推荐使用default package，并应该避免使用它。因为对于使用@ComponentScan，@EntityScan或@SpringBootApplication注解的spring boot应用来说，来自每个jar的类都会被读取，这会造成一定的问题。
注：我们建议遵循java推荐的包命名规范，使用一个翻转的域名(例如com.example.project)

典型的结构：
com
 +- example
     +- myproject
         +- Application.java
         |
         +- domain
         | +- Customer.java
         | +- CustomerRepository.java
         |
         +- service
         | +- CustomerService.java
         |
         +- web
             +- CustomerController.java

导入其他配置类
不需要将所有的@COnfiguration放进一个单独的类，@Import注解可以用来导入其他配置类。另外。也可以用@ComponentScan注解自动收集所有的spring组件，包括@Configuration类

自动配置
spring boot自动配置auto-configuration 尝试根据你添加的jar依赖自动配置你的spring应用。例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库链接beans，那么我们将自动配置一个内存型(in-memory)数据库。
通过@EnableAutoCOnfiguration或者@SpringBootApplication注解添加到一个@Configuration类上选择自动配置
自动配置是非侵占性的，任何时候都可以定义自己的配置来替换自动配置的特定部分
如果发现应用了你不想要的特定自动配置类，可以使用@EnableAutoConfiguration注解的排除属性来禁用
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})


可以自由的使用任何标准的spring框架技术去定义beans和他们注入的依赖。简单而言，用@ComponentScan注解搜索beans，并结合@Autowired构造器注入
如果使用上面建议的结构组织代码(将应用类放到根包下)，可以使用@Componnent注解而不需要任何参数，所有应用程序组件@Component @Service @Repository @Controller 等会自动注册为spring beans

@SpringBootApplication  注解
@SpringBootApplication注解等于以默认属性使用@Cnfiguration @EnableAutoCOnfiguration 和@ComponnetScan

运行应用程序
将营运打包成jar并使用一个内嵌http服务器的一个最大好处是，可以像其他方式那样运行你的应用程序。调试spring boot应用也很简单，不需要任何特殊ide或者扩展

自定义banner 
通过在classpath下添加一个banner.txt或设置banner.location来制定相应的文件可以改变启动过程中打印的banner。如果这个文件有特殊的编码。可以使用banner.encoding设置它
banner.txt的变量
变量
描述
${application.version} MANIFEST.MF中声明的应用版本号,例如1.0
${application.formatted-version} MANIFEST.MF中声明的被格式化后的应用版本号(被括号包裹且以v作为前缀),用于显示
${spring-boot.version} 正在使用的Spring Boot版本号,例如1.2.2.BUILD-SNAPSHOT
${spring-boot.formatted-version} 正在使用的Spring Boot被格式化后的版本号(被括号包裹且以v作为前缀), 用于显示
注:如果想以编程的方式产生一个banner,可以使用SpringBootApplication.setBanner(...)方法。使用
org.springframework.boot.Banner接口,实现你自己的printBanner()方法。


除了常见的spring框架事件，比如ContextRefreshedEvent，一个SpringApplication也发送一些额外的应用事件，一些事件实际上是在ApplicationContext被创建前触发的。最普通的是使用SpringApplication.addListeners方法。
1，在运行开始，但除了监听器注册和初始化以外的任何处理之前，会发送一个ApplicationStartedEvent
2，在Environment将被用于已知的上下文，但在上下文被创建前，会发送一个ApplicationEnvironmentPreparedEvent
3，在refresh开始前，但在bean定义已被加载后，会发送一个ApplicationPreparedEvent
4，启动过程中如果出现异常，会发送一个ApplicationFaileEvent


SpringApplication将从以下位置加载application.properties文件，并把它们添加到spring environment中
1，当前目录下的一个/config子目录
2，当前目录
3，一个classpath下的/config包
4，classpath根路径
注：可以使用yaml文件替代.properties文件

当application.properties里的值被使用时，它们会被存在的Environment过滤，所以能够引用先前定义的值



spring-boot 日志格式
1，日期和时间-精确到毫秒，且易于排序
2，日志级别-ERROR，WARN，INFO，DEBUG或者TRACE
3，Process ID
4，一个用于区分实际日志信息开头的--分隔符
5，线程名-包括在方括号中(控制台输出可能会被截断)
6，日志名-通常是源class的类名(缩写)
7，日志信息

自定义内嵌servlet容器
常见的servlet容器设置可以通过spring environment属性进行配置。通常，你会把这些属性定义到application.properties文件中。
1，server.port----进来的http请求的监听端口号
2，server.address-绑定的接口地址
3，server.sessionTimeout-session超时时间

JSP限制
在内嵌的servlet容器中运行一个Spring Boot应用时，容器对JSP的支持有一些限制
1，tomcat只支持war的打包方式，不支持可执行的jar
2，内嵌的Jetty目前不支持JSPS
3，Undertow不支持JSPs

链接到一个工厂环境数据库
在生产环境中，数据库链接可以使用DataSource池进行自动配置。
1，由于Tomcat数据源连接池的性能和并发，在tomcat可用时，我们总是优先使用它
2，如果HikariCP可用，我们将使用它
3，如果Commons DBCP可用，我们将使用它
4，如果Commons DBCP2可用，我们将使用它

实体类：
传统上，JPA实体类被定义到一个persistence.xml文件中。在spring boot中，这个文件不是必须的，并被实体扫描替代。默认情况下，在你注配置类（被@EnableAutoCnfiguration或者@SpringBootApplication注解的类）下的所有的包都将被查找
任何被@ENtity，@Embeddable， @MappedSuperclass注解的类都将被考虑

Redis
Redis是一个缓存，消息中间件及具有丰富特性的键值存储系统。spring boot为jedis客户端和由Spring Data Redis提供的基于Jedis客户端的抽象提供自动配置。spring-boot-starter-redis

消息
Spring Framework框架为集成消息系统提供了扩展extensive支持：从使用JMsTemplate简化JMS API，到实现一个完整异步消息接受的底层设施
Spring AMQP提供一个相似的用于高级消息队列的特征集，并且spring boot 也为rabbitTemplate和RabbitMQ提供了自动配置选项
Spring Websocket提供原生的STOMP消息支持，并且Spring Boot通过starters和一些自动配置也提供了对他的支持


1，SpringApplication 是Spring Boot框架中描述Spring应用的类，它的run()方法创建了一个Spring应用上下文Application Context。另一方面它会扫描当前应用类路径上的依赖，例如spring-webmvc.由spring-boot-starter-web船体引入，在类路径中，那么spring boot会判断这是一个web应用并且启动一个内嵌的servlet容器，默认是tomcat用于处理http请求
2，Spring WebMvc框架会将Servlet容器里收到的Http请求根据路径分发给对应的@Controller类进行处理@RestController是一类特殊的@Controller，它的返回值直接作为http response的body部分返回给浏览器
3，@RequestMapping 注解表明该方法处理那些URL对应的http请求，也就是我们常说的url路由，请求的分发工作是有spring完成的。例如上面的代码中http://localhost:8080/根据路径就被路由至greeting()方法进行处理。如果访问http://localhost:8080/hello，则会出现404 not found错误，因为我们并没有编写任何方法来处理/hello请求

URL中的变量--PathVariable
在Web应用中url通常是一成不变的，例如微博连个不同的用户的个人主页对应不同的url
我们不可能对每一个用户都编写一个被@RequestMapping注解的方法来处理请求，Spring MVC提供了一套机制来处理这种情况
@RequestMapping("/users/{username}")
public String userProfile(@PathVariable("username" String username))
{
     return String.format("user %s",username);
}
@RequestMapping("posts/{id}")
public String post(@PathVariable("id") int id)
{
     return String.format("post %d",id);
}
在上述的例子中，url中的变量可以用variableName来表示，同事在方法的参数中加上
@PathVariable("variableName")，那么当请求被转发给该方法处理时，对应的url中的变量会被自动赋值给
@PathVariable注解的参数(能够自动根据参数类型复制，例如上式的int)

支持http方法
对于http请求除了url，还需要注意它的方法Method。例如在浏览器中访问一个页面通常通过get方法，而表单的提交一般是post方法。@Controller中的方法同样需要进行区分
@RequestMapping(value="/login" ,method=RequestMethod.GET)
@RequestMapping(value=“/login” ,method=RequestMethod.POST)

模板渲染：
在之前所有的@RequestMapping注解的方法中，返回值字符窜都被直接传送到浏览器并且显示给用户，但是为了能够呈现更加丰富，美观的页面，我们需要将http代码返回给浏览器，浏览器再进行页面的渲染，显示
一种很直观的方法是在处理请求的方法中，直接返回html代码，但是这样做的问题就在于---一个复杂的页面html代码往往也十分复杂，并且嵌入在java代码中十分不利于维护。更好的做好是把页面html代码写在模板文件中，渲染后再返回给用户为了能够进行模板渲染，需要将@RestController改成@Controller
@Controlle
public class HelloController{
 @RequestMapping("/hello/{name}")
 public String hello(@PathVariable("name" String name,Model model){
    model.addAttribute("name",name);
    return "hello"
 }
}
在上述例子中，返回值“hello”并非直接将字符窜返回给浏览器，而是寻找名字为hello的模板进行渲染，我们使用Thymeleaf模板引擎进行模板渲染，需要引入依赖
<dependency>
 <groupId>org.springframeworkd.boot</groupId>
 <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
接下来需要在默认的模板文件夹src/main/resources/templates/目录下添加一个模板文件hello。html

处理静态文件
浏览器页面使用html作为描述语言，那么必然也脱离不了css以及javascript。为了让浏览器能够正确加载类似/css /js等资源，默认情况下我们只需要在src/main/resources/static目录下添加对应的css，js文件。spring mvc 能够自动将他们发布

基于spring的web缓存
缓存的基本思想其实是以空间换时间，io的读写速度相对内存来说非常慢，通常一个web应用的瓶颈就出现在磁盘io的读写上。那么，如果我们在内存中建立一个存储区，将数据缓存起来，当浏览器端由请求到达的时候，直接从内存中获取相应的数据，这样依赖可以降低服务器的压力，二来，可以提高请求的响应熟读，提高用户体验

缓存的分类：
1，数据库数据缓存，web应用业务逻辑业务逻辑比较复杂，数据库繁多，要获取某个完整的数据，往往要多次读取数据库，或者使用极其复杂，效率低的sql查询语句，为了提高查询的性能，将查询后的数据放到内容村中进行缓存，下次查询时，直接从内存缓存直接读取，提高响应效率
2，应用层缓存，应用层缓存主要针对某个业务方法进行缓存，有些业务逻辑比较复杂，可能涉及到多次数据库读写或者其他消耗比较大的操作，应用层缓存可以将复杂的业务逻辑解散出来，降低服务器压力
3，页面缓存 除了io外，web应用的另一个大瓶颈就是页面模板的渲染。每次请求都需要从业务逻辑层获取响应的model，并将其渲染成对应的html。一般来说，web应用读取数据的需求比更新数据数据的需求大很多，大多数情况下，某个请求返回的html是一样的，因此直接将html缓存起来也是缓存的一个主流做法
4，代理服务器缓存 代理服务器是浏览器和源服务器之间的中建服务器，浏览器先向这个中间服务器发起web请求，经过处理后，再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。可以把它理解为一个共享缓存，不只为一个用户服务，一般的大量用户提供服务，因此在减少响应时间和带宽使用方面很有效，同一个副本会被重用多次
5，CDN缓存，也叫网关缓存，反向代理缓存。浏览器现象cdn网关发起web请求，网关服务器后面对应着一台或者多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之间的缓存没法共享，却拥有更好的处扩展性

spring-boot  内嵌应用服务器的配置
application.properties
server.port=8080 #监听端口
server.address= #绑定地址
server.session-timeout= #session有效时间
server.context-path=# 默认为/
server.ssl.× #ssl相关配置

使用Profile区分环境
在某些情况下，应用的某些业务逻辑可能需要有不同的实现。例如邮件服务器，加入EmailService中包含的send方法向指定地址发送电子邮件，但是我们仅仅希望在生产环境中才执行真正发送邮件的代码，而开发环境里面则不发送以免向用户发送无意义的垃圾邮件
@Service
@Profile("dev")
class DevEmailService implements EmailService{

     public void send(String email){}
}
@Profile("dev")表明只有Spring定义的Profile为dev时才会实例化 DevEmailService这个类。
在application.properties中加入spring.profiles.active=dev


spring-boot框架特点：
1，创建独立的spring应用
2，嵌入Tomcat，Jetty Undertow而且不需要部署他们
3，提供的"starters" poms来简化Maven配置
4，尽可能自动配置spring应用
5，提供生产指标，健壮检查和外部化配置
6，绝对没有代码生成和xml配置要求

程序的事件和监听
除了通常的spring框架的时间，如ContextRefreshedEvent SpringApplication发送一些额外的应用程序事件。触发一些事件实际上是ApplicationContext之前创建
除了一些常见的spring时间，像ContextRefreshedEvent SpringApplication会产生一些额外的事件，某些事件甚至会再ApplicationContext创建之前触发，可以通过多种方式创建监听器。
public static void main(String[] args) throws Exception{
  SpringApplication app = new SpringApplication(FirstController.class);
  app.addListeners(new TestListener());
  app.run(args);
}
一个自定义的listener
public class TestListener implements ApplicationListener<ApplicationStartedEvent>{

     @Override
     public void onApplicationEvent(ApplicationStartedEvent event){
     }
}

传统的Spring mvc的web应用，需要配置web.xml，applicationContext.xml 将应用打成war包放入应用服务器(Tomcat,Jetty)中并且运行，如果基于Spring Boot ，这一切都变得简单

pom.xml中引入spring-boot依赖
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.2.5.RELEASE</version>
</parent>
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
</dependencies>

src/main/java中编写可执行类
@Controller
@EnableAutoConfiguration
public class SampleController {

    @RequestMapping("/")
    @ResponseBody
    String home() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(SampleController.class, args);
    }
}


2017-09-01

SpringBoot的特点
1，化简为繁，简化配置
2，备受关注，是下一代框架
3，微服务的入门级微框架

controller的使用
@Controller ：处理http请求
@RestController：Spring4之后新的注解，原来返回json需要@ResponseBody配置@Controller
@RequestMapping：配置url映射

处理请求中的参数
@PathVariable：获取url中的数据
@RequestParam：获取请求参数的值
@GetMapping：组合注解
